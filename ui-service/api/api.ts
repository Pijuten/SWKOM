/* tslint:disable */
/* eslint-disable */
/**
 * SWKOM
 * This is the specification of the required API endpoints for the SWKOM server.
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Document
 */
export interface Document {
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'uploaded_date'?: string;
}
/**
 * 
 * @export
 * @interface DocumentContent
 */
export interface DocumentContent {
    /**
     * 
     * @type {string}
     * @memberof DocumentContent
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentContent
     */
    'content'?: string;
}

/**
 * DocumentsApi - axios parameter creator
 * @export
 */
export const DocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsDocumentIdContentGet: async (documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('documentsDocumentIdContentGet', 'documentId', documentId)
            const localVarPath = `/documents/{documentId}/content`
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication swkom_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows users to upload new content for an existing document.
         * @summary Updates the content of an existing document.
         * @param {string} documentId 
         * @param {Document} document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsDocumentIdContentPut: async (documentId: string, document: Document, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('documentsDocumentIdContentPut', 'documentId', documentId)
            // verify required parameter 'document' is not null or undefined
            assertParamExists('documentsDocumentIdContentPut', 'document', document)
            const localVarPath = `/documents/{documentId}/content`
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication swkom_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(document, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing document. Only allowed if the user owns the document.
         * @summary Deletes an existing document
         * @param {string} documentId ID of the document to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsDocumentIdDelete: async (documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('documentsDocumentIdDelete', 'documentId', documentId)
            const localVarPath = `/documents/{documentId}`
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication swkom_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing document
         * @param {string} documentId ID of the document to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsDocumentIdGet: async (documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('documentsDocumentIdGet', 'documentId', documentId)
            const localVarPath = `/documents/{documentId}`
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication swkom_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication swkom_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows users to create a new document.
         * @summary Creates a new document.
         * @param {Document} document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsPost: async (document: Document, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'document' is not null or undefined
            assertParamExists('documentsPost', 'document', document)
            const localVarPath = `/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication swkom_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(document, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows users to update a document.
         * @summary Updates document.
         * @param {Document} document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsPut: async (document: Document, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'document' is not null or undefined
            assertParamExists('documentsPut', 'document', document)
            const localVarPath = `/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication swkom_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(document, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentsApi - functional programming interface
 * @export
 */
export const DocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsDocumentIdContentGet(documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsDocumentIdContentGet(documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.documentsDocumentIdContentGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows users to upload new content for an existing document.
         * @summary Updates the content of an existing document.
         * @param {string} documentId 
         * @param {Document} document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsDocumentIdContentPut(documentId: string, document: Document, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsDocumentIdContentPut(documentId, document, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.documentsDocumentIdContentPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes an existing document. Only allowed if the user owns the document.
         * @summary Deletes an existing document
         * @param {string} documentId ID of the document to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsDocumentIdDelete(documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsDocumentIdDelete(documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.documentsDocumentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing document
         * @param {string} documentId ID of the document to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsDocumentIdGet(documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsDocumentIdGet(documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.documentsDocumentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Document>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.documentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows users to create a new document.
         * @summary Creates a new document.
         * @param {Document} document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsPost(document: Document, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsPost(document, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.documentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows users to update a document.
         * @summary Updates document.
         * @param {Document} document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsPut(document: Document, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsPut(document, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.documentsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DocumentsApi - factory interface
 * @export
 */
export const DocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsDocumentIdContentGet(documentId: string, options?: RawAxiosRequestConfig): AxiosPromise<DocumentContent> {
            return localVarFp.documentsDocumentIdContentGet(documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows users to upload new content for an existing document.
         * @summary Updates the content of an existing document.
         * @param {string} documentId 
         * @param {Document} document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsDocumentIdContentPut(documentId: string, document: Document, options?: RawAxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.documentsDocumentIdContentPut(documentId, document, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing document. Only allowed if the user owns the document.
         * @summary Deletes an existing document
         * @param {string} documentId ID of the document to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsDocumentIdDelete(documentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.documentsDocumentIdDelete(documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing document
         * @param {string} documentId ID of the document to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsDocumentIdGet(documentId: string, options?: RawAxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.documentsDocumentIdGet(documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Document>> {
            return localVarFp.documentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Allows users to create a new document.
         * @summary Creates a new document.
         * @param {Document} document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsPost(document: Document, options?: RawAxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.documentsPost(document, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows users to update a document.
         * @summary Updates document.
         * @param {Document} document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsPut(document: Document, options?: RawAxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.documentsPut(document, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentsApi - object-oriented interface
 * @export
 * @class DocumentsApi
 * @extends {BaseAPI}
 */
export class DocumentsApi extends BaseAPI {
    /**
     * 
     * @param {string} documentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsDocumentIdContentGet(documentId: string, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsDocumentIdContentGet(documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows users to upload new content for an existing document.
     * @summary Updates the content of an existing document.
     * @param {string} documentId 
     * @param {Document} document 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsDocumentIdContentPut(documentId: string, document: Document, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsDocumentIdContentPut(documentId, document, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing document. Only allowed if the user owns the document.
     * @summary Deletes an existing document
     * @param {string} documentId ID of the document to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsDocumentIdDelete(documentId: string, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsDocumentIdDelete(documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing document
     * @param {string} documentId ID of the document to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsDocumentIdGet(documentId: string, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsDocumentIdGet(documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all documents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsGet(options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows users to create a new document.
     * @summary Creates a new document.
     * @param {Document} document 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsPost(document: Document, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsPost(document, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows users to update a document.
     * @summary Updates document.
     * @param {Document} document 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsPut(document: Document, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsPut(document, options).then((request) => request(this.axios, this.basePath));
    }
}



