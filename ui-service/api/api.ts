/* tslint:disable */
/* eslint-disable */
/**
 * Example API
 * OpenAPI specification for the two Java models.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Document
 */
export interface Document {
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'description': string;
    /**
     * 
     * @type {File}
     * @memberof Document
     */
    'file': File;
}
/**
 * 
 * @export
 * @interface DocumentContent
 */
export interface DocumentContent {
    /**
     * 
     * @type {string}
     * @memberof DocumentContent
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DocumentContent
     */
    'content': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a Model1 object
         * @param {string} id ID of the Model1 object to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('documentDelete', 'id', id)
            const localVarPath = `/document`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Model1 objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/document`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific Model1 object by ID
         * @param {string} id ID of the Model1 object to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('documentIdGet', 'id', id)
            const localVarPath = `/document/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new Model1 object
         * @param {string} title 
         * @param {string} username 
         * @param {string} description 
         * @param {File} file 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentPost: async (title: string, username: string, description: string, file: File, id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('documentPost', 'title', title)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('documentPost', 'username', username)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('documentPost', 'description', description)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('documentPost', 'file', file)
            const localVarPath = `/document`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.append('username', username as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Model1 object
         * @param {string} title 
         * @param {string} username 
         * @param {string} description 
         * @param {File} file 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentPut: async (title: string, username: string, description: string, file: File, id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('documentPut', 'title', title)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('documentPut', 'username', username)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('documentPut', 'description', description)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('documentPut', 'file', file)
            const localVarPath = `/document`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.append('username', username as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Model2 objects or search by a query string
         * @param {string} search Search query to filter Model2 objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentSearchGet: async (search: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('documentSearchGet', 'search', search)
            const localVarPath = `/document/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Model2 object
         * @param {string} id ID of the Model2 object to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentcontentDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('documentcontentDelete', 'id', id)
            const localVarPath = `/documentcontent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Model2 objects or search by a query string
         * @param {string} [search] Search query to filter Model2 objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentcontentGet: async (search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/documentcontent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific Model2 object by ID
         * @param {string} id ID of the Model2 object to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentcontentIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('documentcontentIdGet', 'id', id)
            const localVarPath = `/documentcontent/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new Model2 object
         * @param {DocumentContent} documentContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentcontentPost: async (documentContent: DocumentContent, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentContent' is not null or undefined
            assertParamExists('documentcontentPost', 'documentContent', documentContent)
            const localVarPath = `/documentcontent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(documentContent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Model2 object
         * @param {DocumentContent} documentContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentcontentPut: async (documentContent: DocumentContent, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentContent' is not null or undefined
            assertParamExists('documentcontentPut', 'documentContent', documentContent)
            const localVarPath = `/documentcontent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(documentContent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a Model1 object
         * @param {string} id ID of the Model1 object to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.documentDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all Model1 objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Document>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.documentGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific Model1 object by ID
         * @param {string} id ID of the Model1 object to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.documentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new Model1 object
         * @param {string} title 
         * @param {string} username 
         * @param {string} description 
         * @param {File} file 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentPost(title: string, username: string, description: string, file: File, id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentPost(title, username, description, file, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.documentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing Model1 object
         * @param {string} title 
         * @param {string} username 
         * @param {string} description 
         * @param {File} file 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentPut(title: string, username: string, description: string, file: File, id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentPut(title, username, description, file, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.documentPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all Model2 objects or search by a query string
         * @param {string} search Search query to filter Model2 objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentSearchGet(search: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Document>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentSearchGet(search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.documentSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a Model2 object
         * @param {string} id ID of the Model2 object to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentcontentDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentcontentDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.documentcontentDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all Model2 objects or search by a query string
         * @param {string} [search] Search query to filter Model2 objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentcontentGet(search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocumentContent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentcontentGet(search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.documentcontentGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific Model2 object by ID
         * @param {string} id ID of the Model2 object to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentcontentIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentcontentIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.documentcontentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new Model2 object
         * @param {DocumentContent} documentContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentcontentPost(documentContent: DocumentContent, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentcontentPost(documentContent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.documentcontentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing Model2 object
         * @param {DocumentContent} documentContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentcontentPut(documentContent: DocumentContent, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentcontentPut(documentContent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.documentcontentPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a Model1 object
         * @param {string} id ID of the Model1 object to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.documentDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Model1 objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Document>> {
            return localVarFp.documentGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific Model1 object by ID
         * @param {string} id ID of the Model1 object to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.documentIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new Model1 object
         * @param {string} title 
         * @param {string} username 
         * @param {string} description 
         * @param {File} file 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentPost(title: string, username: string, description: string, file: File, id?: string, options?: RawAxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.documentPost(title, username, description, file, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Model1 object
         * @param {string} title 
         * @param {string} username 
         * @param {string} description 
         * @param {File} file 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentPut(title: string, username: string, description: string, file: File, id?: string, options?: RawAxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.documentPut(title, username, description, file, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Model2 objects or search by a query string
         * @param {string} search Search query to filter Model2 objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentSearchGet(search: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Document>> {
            return localVarFp.documentSearchGet(search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Model2 object
         * @param {string} id ID of the Model2 object to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentcontentDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.documentcontentDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Model2 objects or search by a query string
         * @param {string} [search] Search query to filter Model2 objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentcontentGet(search?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<DocumentContent>> {
            return localVarFp.documentcontentGet(search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific Model2 object by ID
         * @param {string} id ID of the Model2 object to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentcontentIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DocumentContent> {
            return localVarFp.documentcontentIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new Model2 object
         * @param {DocumentContent} documentContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentcontentPost(documentContent: DocumentContent, options?: RawAxiosRequestConfig): AxiosPromise<DocumentContent> {
            return localVarFp.documentcontentPost(documentContent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Model2 object
         * @param {DocumentContent} documentContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentcontentPut(documentContent: DocumentContent, options?: RawAxiosRequestConfig): AxiosPromise<DocumentContent> {
            return localVarFp.documentcontentPut(documentContent, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Delete a Model1 object
     * @param {string} id ID of the Model1 object to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public documentDelete(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).documentDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Model1 objects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public documentGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).documentGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific Model1 object by ID
     * @param {string} id ID of the Model1 object to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public documentIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).documentIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new Model1 object
     * @param {string} title 
     * @param {string} username 
     * @param {string} description 
     * @param {File} file 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public documentPost(title: string, username: string, description: string, file: File, id?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).documentPost(title, username, description, file, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Model1 object
     * @param {string} title 
     * @param {string} username 
     * @param {string} description 
     * @param {File} file 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public documentPut(title: string, username: string, description: string, file: File, id?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).documentPut(title, username, description, file, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Model2 objects or search by a query string
     * @param {string} search Search query to filter Model2 objects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public documentSearchGet(search: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).documentSearchGet(search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Model2 object
     * @param {string} id ID of the Model2 object to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public documentcontentDelete(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).documentcontentDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Model2 objects or search by a query string
     * @param {string} [search] Search query to filter Model2 objects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public documentcontentGet(search?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).documentcontentGet(search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific Model2 object by ID
     * @param {string} id ID of the Model2 object to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public documentcontentIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).documentcontentIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new Model2 object
     * @param {DocumentContent} documentContent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public documentcontentPost(documentContent: DocumentContent, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).documentcontentPost(documentContent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Model2 object
     * @param {DocumentContent} documentContent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public documentcontentPut(documentContent: DocumentContent, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).documentcontentPut(documentContent, options).then((request) => request(this.axios, this.basePath));
    }
}



