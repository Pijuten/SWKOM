/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Document;
import java.util.UUID;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-09T11:24:51.056912600+01:00[Europe/Berlin]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "document", description = "the document API")
public interface DocumentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /document : Delete a Model1 object
     *
     * @param id ID of the Model1 object to delete (required)
     * @return Model1 object deleted successfully (status code 204)
     */
    @Operation(
        operationId = "documentDelete",
        summary = "Delete a Model1 object",
        responses = {
            @ApiResponse(responseCode = "204", description = "Model1 object deleted successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/document"
    )
    
    default ResponseEntity<Void> documentDelete(
        @NotNull @Parameter(name = "id", description = "ID of the Model1 object to delete", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = true) UUID id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /document : Get all Model1 objects
     *
     * @return List of Model1 objects (status code 200)
     */
    @Operation(
        operationId = "documentGet",
        summary = "Get all Model1 objects",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Model1 objects", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Document.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/document",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Document>> documentGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"file\" : \"\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"title\", \"username\" : \"username\" }, { \"file\" : \"\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"title\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /document/{id} : Get a specific Model1 object by ID
     *
     * @param id ID of the Model1 object to retrieve (required)
     * @return Model1 object retrieved successfully (status code 200)
     *         or Model1 object not found (status code 404)
     */
    @Operation(
        operationId = "documentIdGet",
        summary = "Get a specific Model1 object by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Model1 object retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
            }),
            @ApiResponse(responseCode = "404", description = "Model1 object not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/document/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Document> documentIdGet(
        @Parameter(name = "id", description = "ID of the Model1 object to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"file\" : \"\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"title\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /document : Create a new Model1 object
     *
     * @param title  (required)
     * @param username  (required)
     * @param description  (required)
     * @param file  (required)
     * @param id  (optional)
     * @return Model1 object created successfully (status code 201)
     */
    @Operation(
        operationId = "documentPost",
        summary = "Create a new Model1 object",
        responses = {
            @ApiResponse(responseCode = "201", description = "Model1 object created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/document",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<Document> documentPost(
        @Parameter(name = "title", description = "", required = true) @Valid @RequestParam(value = "title", required = true) String title,
        @Parameter(name = "username", description = "", required = true) @Valid @RequestParam(value = "username", required = true) String username,
        @Parameter(name = "description", description = "", required = true) @Valid @RequestParam(value = "description", required = true) String description,
        @Parameter(name = "file", description = "", required = true) @RequestPart(value = "file", required = true) MultipartFile file,
        @Parameter(name = "id", description = "") @Valid @RequestParam(value = "id", required = false) UUID id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"file\" : \"\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"title\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /document : Update an existing Model1 object
     *
     * @param title  (required)
     * @param username  (required)
     * @param description  (required)
     * @param file  (required)
     * @param id  (optional)
     * @return Model1 object updated successfully (status code 200)
     */
    @Operation(
        operationId = "documentPut",
        summary = "Update an existing Model1 object",
        responses = {
            @ApiResponse(responseCode = "200", description = "Model1 object updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/document",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<Document> documentPut(
        @Parameter(name = "title", description = "", required = true) @Valid @RequestParam(value = "title", required = true) String title,
        @Parameter(name = "username", description = "", required = true) @Valid @RequestParam(value = "username", required = true) String username,
        @Parameter(name = "description", description = "", required = true) @Valid @RequestParam(value = "description", required = true) String description,
        @Parameter(name = "file", description = "", required = true) @RequestPart(value = "file", required = true) MultipartFile file,
        @Parameter(name = "id", description = "") @Valid @RequestParam(value = "id", required = false) UUID id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"file\" : \"\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"title\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /document/search : Get all Model2 objects or search by a query string
     *
     * @param search Search query to filter Model2 objects (required)
     * @return List of Model2 objects (status code 200)
     */
    @Operation(
        operationId = "documentSearchGet",
        summary = "Get all Model2 objects or search by a query string",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Model2 objects", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Document.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/document/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Document>> documentSearchGet(
        @NotNull @Parameter(name = "search", description = "Search query to filter Model2 objects", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "search", required = true) String search
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"file\" : \"\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"title\", \"username\" : \"username\" }, { \"file\" : \"\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"title\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
