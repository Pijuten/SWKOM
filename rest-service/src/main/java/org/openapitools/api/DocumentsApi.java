/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Document;
import org.openapitools.model.DocumentContent;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-05T01:39:53.230455200+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "documents", description = "Documents user uploads and maintains")
public interface DocumentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /documents/content : Updates the content of an existing document.
     * Allows users to upload new content for an existing document.
     *
     * @param documentContent  (required)
     * @return Document content successfully updated (status code 200)
     *         or Invalid input (status code 400)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "documentsContentPut",
        summary = "Updates the content of an existing document.",
        description = "Allows users to upload new content for an existing document.",
        tags = { "documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Document content successfully updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentContent.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "swkom_auth", scopes={ "write:documents", "read:documents" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/documents/content",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DocumentContent> documentsContentPut(
        @Parameter(name = "DocumentContent", description = "", required = true) @Valid @RequestBody DocumentContent documentContent
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"550e8400-e29b-41d4-a716-446655440000\", \"content\" : \"content\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /documents/{documentId}/content
     *
     * @param documentId  (required)
     * @return Document retrieved successfully (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or Document not found (status code 404)
     */
    @Operation(
        operationId = "documentsDocumentIdContentGet",
        tags = { "documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Document retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentContent.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = DocumentContent.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid"),
            @ApiResponse(responseCode = "404", description = "Document not found")
        },
        security = {
            @SecurityRequirement(name = "swkom_auth", scopes={ "read:documents" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/documents/{documentId}/content",
        produces = { "application/json", "application/xml" }
    )
    
    default ResponseEntity<DocumentContent> documentsDocumentIdContentGet(
        @Parameter(name = "documentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("documentId") UUID documentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"550e8400-e29b-41d4-a716-446655440000\", \"content\" : \"content\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <id>550e8400-e29b-41d4-a716-446655440000</id> <content>aeiou</content> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /documents/{documentId} : Deletes an existing document
     * Deletes an existing document. Only allowed if the user owns the document.
     *
     * @param documentId ID of the document to retrieve. (required)
     * @return Document successfully deleted (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or Document not found (status code 404)
     *         or Conflict in document deletion (status code 409)
     */
    @Operation(
        operationId = "documentsDocumentIdDelete",
        summary = "Deletes an existing document",
        description = "Deletes an existing document. Only allowed if the user owns the document.",
        tags = { "documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Document successfully deleted"),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid"),
            @ApiResponse(responseCode = "404", description = "Document not found"),
            @ApiResponse(responseCode = "409", description = "Conflict in document deletion")
        },
        security = {
            @SecurityRequirement(name = "swkom_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/documents/{documentId}"
    )
    
    default ResponseEntity<Void> documentsDocumentIdDelete(
        @Parameter(name = "documentId", description = "ID of the document to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("documentId") UUID documentId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /documents/{documentId} : Retrieve an existing document
     *
     * @param documentId ID of the document to retrieve. (required)
     * @return Document retrieved successfully (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or Document not found (status code 404)
     */
    @Operation(
        operationId = "documentsDocumentIdGet",
        summary = "Retrieve an existing document",
        tags = { "documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Document retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Document.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid"),
            @ApiResponse(responseCode = "404", description = "Document not found")
        },
        security = {
            @SecurityRequirement(name = "swkom_auth", scopes={ "read:documents" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/documents/{documentId}",
        produces = { "application/json", "application/xml" }
    )
    
    default ResponseEntity<Document> documentsDocumentIdGet(
        @Parameter(name = "documentId", description = "ID of the document to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("documentId") UUID documentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uploaded_date\" : \"uploaded_date\", \"description\" : \"This is a description of the doc\", \"id\" : \"550e8400-e29b-41d4-a716-446655440000\", \"username\" : \"name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<document> <id>550e8400-e29b-41d4-a716-446655440000</id> <username>name</username> <description>This is a description of the doc</description> <uploaded_date>aeiou</uploaded_date> </document>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /documents : Get all documents
     *
     * @return A list of documents is returned. (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or No documents found. (status code 404)
     */
    @Operation(
        operationId = "documentsGet",
        summary = "Get all documents",
        tags = { "documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of documents is returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Document.class))),
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Document.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid"),
            @ApiResponse(responseCode = "404", description = "No documents found.")
        },
        security = {
            @SecurityRequirement(name = "swkom_auth", scopes={ "read:documents" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/documents",
        produces = { "application/json", "application/xml" }
    )
    
    default ResponseEntity<List<Document>> documentsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"uploaded_date\" : \"uploaded_date\", \"description\" : \"This is a description of the doc\", \"id\" : \"550e8400-e29b-41d4-a716-446655440000\", \"username\" : \"name\" }, { \"uploaded_date\" : \"uploaded_date\", \"description\" : \"This is a description of the doc\", \"id\" : \"550e8400-e29b-41d4-a716-446655440000\", \"username\" : \"name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<document> <id>550e8400-e29b-41d4-a716-446655440000</id> <username>name</username> <description>This is a description of the doc</description> <uploaded_date>aeiou</uploaded_date> </document>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /documents : Creates a new document.
     * Allows users to create a new document.
     *
     * @param document  (required)
     * @return Document successfully created (status code 201)
     *         or Invalid input (status code 400)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "documentsPost",
        summary = "Creates a new document.",
        description = "Allows users to create a new document.",
        tags = { "documents" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Document successfully created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "swkom_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/documents",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Document> documentsPost(
        @Parameter(name = "Document", description = "", required = true) @Valid @RequestBody Document document
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uploaded_date\" : \"uploaded_date\", \"description\" : \"This is a description of the doc\", \"id\" : \"550e8400-e29b-41d4-a716-446655440000\", \"username\" : \"name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /documents : Updates document.
     * Allows users to update a document.
     *
     * @param document  (required)
     * @return Document successfully created (status code 201)
     *         or Invalid input (status code 400)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "documentsPut",
        summary = "Updates document.",
        description = "Allows users to update a document.",
        tags = { "documents" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Document successfully created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "swkom_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/documents",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Document> documentsPut(
        @Parameter(name = "Document", description = "", required = true) @Valid @RequestBody Document document
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uploaded_date\" : \"uploaded_date\", \"description\" : \"This is a description of the doc\", \"id\" : \"550e8400-e29b-41d4-a716-446655440000\", \"username\" : \"name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
